package practica1.CircularQ;

import java.util.Iterator;
import util.Queue;

public class CircularQueue<E> implements Queue<E> {

  private final E[] queue;
  private final int N;
  // Completar...
  private int head;
  private int tail;
  private int numElem;

  public CircularQueue(int N) {
    this.N = N;
    queue = (E[]) (new Object[N]);
    head = 0;
    tail = 0;
    numElem = 0;
  }

  @Override
  public int size() {
    // throw new RuntimeException("//Completar...");
    return numElem;
  }

  @Override
  public int free() {
    // throw new RuntimeException("//Completar...");
    return N - numElem;
  }

  @Override
  public boolean empty() {
    // throw new RuntimeException("//Completar...");
    return numElem == 0;
  }

  @Override
  public boolean full() {
    // throw new RuntimeException("//Completar...");
    return numElem == N;
  }

  @Override
  public E peekFirst() {
    // throw new RuntimeException("//Completar...");
    return queue[head];
  }

  @Override
  public E get() {
    // throw new RuntimeException("//Completar...");
    if (empty()) {
      throw new IllegalStateException();
    }
    E e = queue[head];
    queue[head] = null;
    head = (head + 1) % N;
    numElem--;
    return e;
  }

  @Override
  public void put(E e) {
    // throw new RuntimeException("//Completar...");
    if (full()) {
      throw new IllegalStateException();
    }
    queue[tail] = e;
    tail = (tail + 1) % N;
    numElem++;
  }

  @Override
  public String toString() {
    // throw new RuntimeException("//Completar...");
    System.out.println("head: " + head + " tail: " + tail + " numElem: " + numElem);
    String string = "";
    for (int i = 0; i < queue.length; i++) {
      string += (head + i) % N + ": " + queue[(head + i) % N] + "\n";
    }
    return string;
  }

  @Override
  public Iterator<E> iterator() {
    return new MyIterator();
  }

  class MyIterator implements Iterator {

    // Completar...

    @Override
    public boolean hasNext() {
      throw new RuntimeException("//Completar...");
    }

    @Override
    public E next() {
      throw new RuntimeException("//Completar...");
    }

    @Override
    public void remove() {
      throw new RuntimeException("//Completar...");
    }

  }
}
